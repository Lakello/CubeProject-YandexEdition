//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Source/Scripts/Input System/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace CubeProject.InputSystem
{
    public partial class @PlayerInput: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @PlayerInput()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""Desktop"",
            ""id"": ""26eaf2ec-71e9-4b03-9cc2-870d40aad8df"",
            ""actions"": [
                {
                    ""name"": ""Vertical"",
                    ""type"": ""Value"",
                    ""id"": ""62181227-6110-4da4-a168-7c4797e96a5c"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Horizontal"",
                    ""type"": ""Value"",
                    ""id"": ""f729869e-691f-4f2b-8322-fac7b369fd7e"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""UsePress"",
                    ""type"": ""Value"",
                    ""id"": ""16dbd2e1-2d74-44b8-864e-7aa176255f80"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""UseRelease"",
                    ""type"": ""Button"",
                    ""id"": ""216fd6ec-47d9-4c9a-b470-5a65ff1cbf56"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Menu"",
                    ""type"": ""Value"",
                    ""id"": ""702d34e5-34b7-4eb3-9d1d-f98964fb59bf"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""0382415d-6a71-43d2-b1b2-0c5eb75fed87"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Vertical"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""fbb518f7-72c8-44d7-bf6a-692786809947"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Vertical"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""20d28325-5768-447a-9330-8e5999aafe19"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Vertical"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""d27d3480-37c0-4218-bb46-aa8ffdc982c7"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Vertical"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""664d87ee-0ea7-448e-bf9f-62f61e22d256"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Vertical"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""f191d8ae-e90b-4566-96c2-5927266ba37e"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Vertical"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""90e91eb7-2303-4299-adc3-4fa04bbdfd33"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Horizontal"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""7da9140d-c8b4-4824-b5fa-0e9e9baa1010"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Horizontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""76cab52d-b45f-4ab1-bcf6-a1556f83692a"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Horizontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""2a53abc2-dbf2-4878-b27c-2de12347d20c"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Horizontal"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""5baad87e-3e8f-4577-a75d-24418687bade"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Horizontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""84ff1909-1afa-49c7-aec0-9e64d9a1ed22"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Horizontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""f03074fe-ba6e-4f7b-a442-e61e850faaca"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": ""Desktop"",
                    ""action"": ""UsePress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a5c2067c-eef1-454d-8743-b32044c5cc15"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Desktop"",
                    ""action"": ""Menu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f9b49a7c-44e1-462b-93dc-33ef7a85bc23"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": ""Press(behavior=1)"",
                    ""processors"": """",
                    ""groups"": ""Desktop"",
                    ""action"": ""UseRelease"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Mobile"",
            ""id"": ""b9e169b3-0557-4c9c-84b0-329ad9c4a58d"",
            ""actions"": [
                {
                    ""name"": ""PrimaryContact"",
                    ""type"": ""PassThrough"",
                    ""id"": ""1e74963a-ce55-4b1c-96b8-1ad5262fe25d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PrimaryPosition"",
                    ""type"": ""PassThrough"",
                    ""id"": ""9758a907-2009-4e8f-964b-37a3df19b02e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Delta"",
                    ""type"": ""Value"",
                    ""id"": ""d159fa4a-38f1-4990-8252-fa1b8f320801"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""77afea12-1ac2-4ce8-acbe-6a2641fe6076"",
                    ""path"": ""<Touchscreen>/primaryTouch/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PrimaryContact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fe89e265-492b-4ab1-a867-ce4f6000873e"",
                    ""path"": ""<Touchscreen>/primaryTouch/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PrimaryPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0b79a949-bbaf-4405-9af6-6dec6e7eaf2a"",
                    ""path"": ""<Touchscreen>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Delta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Desktop"",
            ""bindingGroup"": ""Desktop"",
            ""devices"": []
        }
    ]
}");
            // Desktop
            m_Desktop = asset.FindActionMap("Desktop", throwIfNotFound: true);
            m_Desktop_Vertical = m_Desktop.FindAction("Vertical", throwIfNotFound: true);
            m_Desktop_Horizontal = m_Desktop.FindAction("Horizontal", throwIfNotFound: true);
            m_Desktop_UsePress = m_Desktop.FindAction("UsePress", throwIfNotFound: true);
            m_Desktop_UseRelease = m_Desktop.FindAction("UseRelease", throwIfNotFound: true);
            m_Desktop_Menu = m_Desktop.FindAction("Menu", throwIfNotFound: true);
            // Mobile
            m_Mobile = asset.FindActionMap("Mobile", throwIfNotFound: true);
            m_Mobile_PrimaryContact = m_Mobile.FindAction("PrimaryContact", throwIfNotFound: true);
            m_Mobile_PrimaryPosition = m_Mobile.FindAction("PrimaryPosition", throwIfNotFound: true);
            m_Mobile_Delta = m_Mobile.FindAction("Delta", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Desktop
        private readonly InputActionMap m_Desktop;
        private List<IDesktopActions> m_DesktopActionsCallbackInterfaces = new List<IDesktopActions>();
        private readonly InputAction m_Desktop_Vertical;
        private readonly InputAction m_Desktop_Horizontal;
        private readonly InputAction m_Desktop_UsePress;
        private readonly InputAction m_Desktop_UseRelease;
        private readonly InputAction m_Desktop_Menu;
        public struct DesktopActions
        {
            private @PlayerInput m_Wrapper;
            public DesktopActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @Vertical => m_Wrapper.m_Desktop_Vertical;
            public InputAction @Horizontal => m_Wrapper.m_Desktop_Horizontal;
            public InputAction @UsePress => m_Wrapper.m_Desktop_UsePress;
            public InputAction @UseRelease => m_Wrapper.m_Desktop_UseRelease;
            public InputAction @Menu => m_Wrapper.m_Desktop_Menu;
            public InputActionMap Get() { return m_Wrapper.m_Desktop; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(DesktopActions set) { return set.Get(); }
            public void AddCallbacks(IDesktopActions instance)
            {
                if (instance == null || m_Wrapper.m_DesktopActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_DesktopActionsCallbackInterfaces.Add(instance);
                @Vertical.started += instance.OnVertical;
                @Vertical.performed += instance.OnVertical;
                @Vertical.canceled += instance.OnVertical;
                @Horizontal.started += instance.OnHorizontal;
                @Horizontal.performed += instance.OnHorizontal;
                @Horizontal.canceled += instance.OnHorizontal;
                @UsePress.started += instance.OnUsePress;
                @UsePress.performed += instance.OnUsePress;
                @UsePress.canceled += instance.OnUsePress;
                @UseRelease.started += instance.OnUseRelease;
                @UseRelease.performed += instance.OnUseRelease;
                @UseRelease.canceled += instance.OnUseRelease;
                @Menu.started += instance.OnMenu;
                @Menu.performed += instance.OnMenu;
                @Menu.canceled += instance.OnMenu;
            }

            private void UnregisterCallbacks(IDesktopActions instance)
            {
                @Vertical.started -= instance.OnVertical;
                @Vertical.performed -= instance.OnVertical;
                @Vertical.canceled -= instance.OnVertical;
                @Horizontal.started -= instance.OnHorizontal;
                @Horizontal.performed -= instance.OnHorizontal;
                @Horizontal.canceled -= instance.OnHorizontal;
                @UsePress.started -= instance.OnUsePress;
                @UsePress.performed -= instance.OnUsePress;
                @UsePress.canceled -= instance.OnUsePress;
                @UseRelease.started -= instance.OnUseRelease;
                @UseRelease.performed -= instance.OnUseRelease;
                @UseRelease.canceled -= instance.OnUseRelease;
                @Menu.started -= instance.OnMenu;
                @Menu.performed -= instance.OnMenu;
                @Menu.canceled -= instance.OnMenu;
            }

            public void RemoveCallbacks(IDesktopActions instance)
            {
                if (m_Wrapper.m_DesktopActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IDesktopActions instance)
            {
                foreach (var item in m_Wrapper.m_DesktopActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_DesktopActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public DesktopActions @Desktop => new DesktopActions(this);

        // Mobile
        private readonly InputActionMap m_Mobile;
        private List<IMobileActions> m_MobileActionsCallbackInterfaces = new List<IMobileActions>();
        private readonly InputAction m_Mobile_PrimaryContact;
        private readonly InputAction m_Mobile_PrimaryPosition;
        private readonly InputAction m_Mobile_Delta;
        public struct MobileActions
        {
            private @PlayerInput m_Wrapper;
            public MobileActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @PrimaryContact => m_Wrapper.m_Mobile_PrimaryContact;
            public InputAction @PrimaryPosition => m_Wrapper.m_Mobile_PrimaryPosition;
            public InputAction @Delta => m_Wrapper.m_Mobile_Delta;
            public InputActionMap Get() { return m_Wrapper.m_Mobile; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(MobileActions set) { return set.Get(); }
            public void AddCallbacks(IMobileActions instance)
            {
                if (instance == null || m_Wrapper.m_MobileActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_MobileActionsCallbackInterfaces.Add(instance);
                @PrimaryContact.started += instance.OnPrimaryContact;
                @PrimaryContact.performed += instance.OnPrimaryContact;
                @PrimaryContact.canceled += instance.OnPrimaryContact;
                @PrimaryPosition.started += instance.OnPrimaryPosition;
                @PrimaryPosition.performed += instance.OnPrimaryPosition;
                @PrimaryPosition.canceled += instance.OnPrimaryPosition;
                @Delta.started += instance.OnDelta;
                @Delta.performed += instance.OnDelta;
                @Delta.canceled += instance.OnDelta;
            }

            private void UnregisterCallbacks(IMobileActions instance)
            {
                @PrimaryContact.started -= instance.OnPrimaryContact;
                @PrimaryContact.performed -= instance.OnPrimaryContact;
                @PrimaryContact.canceled -= instance.OnPrimaryContact;
                @PrimaryPosition.started -= instance.OnPrimaryPosition;
                @PrimaryPosition.performed -= instance.OnPrimaryPosition;
                @PrimaryPosition.canceled -= instance.OnPrimaryPosition;
                @Delta.started -= instance.OnDelta;
                @Delta.performed -= instance.OnDelta;
                @Delta.canceled -= instance.OnDelta;
            }

            public void RemoveCallbacks(IMobileActions instance)
            {
                if (m_Wrapper.m_MobileActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IMobileActions instance)
            {
                foreach (var item in m_Wrapper.m_MobileActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_MobileActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public MobileActions @Mobile => new MobileActions(this);
        private int m_DesktopSchemeIndex = -1;
        public InputControlScheme DesktopScheme
        {
            get
            {
                if (m_DesktopSchemeIndex == -1) m_DesktopSchemeIndex = asset.FindControlSchemeIndex("Desktop");
                return asset.controlSchemes[m_DesktopSchemeIndex];
            }
        }
        public interface IDesktopActions
        {
            void OnVertical(InputAction.CallbackContext context);
            void OnHorizontal(InputAction.CallbackContext context);
            void OnUsePress(InputAction.CallbackContext context);
            void OnUseRelease(InputAction.CallbackContext context);
            void OnMenu(InputAction.CallbackContext context);
        }
        public interface IMobileActions
        {
            void OnPrimaryContact(InputAction.CallbackContext context);
            void OnPrimaryPosition(InputAction.CallbackContext context);
            void OnDelta(InputAction.CallbackContext context);
        }
    }
}
